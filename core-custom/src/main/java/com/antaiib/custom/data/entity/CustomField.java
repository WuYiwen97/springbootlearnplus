package com.antaiib.custom.data.entity;

import com.antaiib.custom.data.entity.base.BaseCustomField;
import com.antaiib.custom.data.enums.CustmoFieldFlagEnum;
import com.antaiib.custom.data.utils.format.CustomFormat;
import com.antaiib.custom.utils.CTMConstants;

import javax.persistence.Column;
import java.util.function.Predicate;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class CustomField extends BaseCustomField<CustomField> {
    /**
     * 字段编码
     */
    @Column(name = "field_code", columnDefinition = "编码（必填）" , nullable = false, unique = true)
    private String fieldCode;
    /**
     * 字段名称
     */
    @Column(name = "field_desname", columnDefinition = "描述名称（必填）" ,nullable = false)
    private String fieldDesname;
    /**
     * 字段实际名称
     */
    @Column(name = "field_name", columnDefinition = "字段名称（必填）" ,nullable = false, unique = true)
    private String fieldName;
    /**
     * 字段类型
     */
    @Column(name = "field_type", columnDefinition = "类型（必填）", nullable = false)
    private String fieldType;
    /**
     * 字段长度
     */
    @Column(name = "field_len", columnDefinition = "长度" ,nullable = false)
    private String fieldLen;
    /**
     * 小数位数，只有当字段类型为浮点型的时候有值，其余时候默认为空
     */
    @Column(name = "field_decimals", columnDefinition = "小数位数")
    private String fieldDecimals;
    /**
     * 数据库字段默认值
     */
    @Column(name = "field_default_value", columnDefinition = "字段默认值")
    private String fieldDefaultValue;
    /**
     * 字段必填 0：否 1：是
     */
    @Column(name = "field_not_null", columnDefinition = "字段必填（必填）")
    private Integer fieldNotNull;
    /**
     * 显示方式
     */
    @CustomFormat(code = "show")
    @Column(name = "field_show", columnDefinition = "显示方式（必填）")
    private String fieldShow;

    /**
     * 字段标识 1：编码字段，2：预设字段，3：普通字段
     */
    @Column(name = "field_flag", columnDefinition = "字段标识（必填）", nullable = false)
    private Integer fieldFlag;

    private String oldFieldName;
    public String getOldFieldName() {
        return oldFieldName;
    }
    public void setOldFieldName(String oldFieldName) {
        this.oldFieldName = oldFieldName;
    }

    /**
     * 过滤出del_id字段谓语
     * 字段名-del_id，字段标识-预设字段
     *
     * @return {@link Predicate}<{@link CustomField}>
     */
    public static Predicate<CustomField> filterDelIdPredicate() {
        return field -> CTMConstants.LOGICAL_DEL_ID_FIELD_NAME.equals(field.getFieldName())
                && CustmoFieldFlagEnum.PRESET_FIELD.getCode().equals(field.getFieldFlag());
    }
}
